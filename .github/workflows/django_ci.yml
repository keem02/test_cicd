

name: Django CI

on:
    push:
        branches: [ main ]

jobs:
    ci:
        runs-on: ubuntu-latest

        steps:
        # 1
        - name: 코드 체크아웃
          uses: actions/checkout@v4

        # 2
        - name: env파일 만들기
          run:
            echo "DB_NAME=${{ secrets.DB_NAME }}" > .env # > 신규 작성
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env # >> 추가 작성
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

        # 3
        - name: Docker compose 실행
          run: docker-compose up -d --build

        # 4
        - name: Django 테스트 실행
          run: docker compose exec -T web python manage.py test 
          # T는 TTY 찾아보면 CI/CD같은 비대화형환경, 그냥 실행만 하는 환경, 던져놓고 실행하는 환경,
          # 비대화형 환경이나 스크립트에서 명령어 실행할 때 컬러 출력없이 텍스트로 실행

        # 5
        - name: Docker 정리
          run: docker compose down

    cd:
        runs-on: ubuntu-latest
        if : github.ref == 'refs/heads/main'

        steps:
        - name: 코드 체크아웃
          uses: actions/checkout@v4

        - name: SSH 키 설정
          env:
            PRIVATE_KEY: ${{secrets.AWS_PRIVATE_KEY}}
          run:
            mkdir -p ~/.ssh
            echo "$PRIVATE_KEY" > ~/.ssh/aws.pem
            chmod 600 ~/.ssh/aws.pem

        - name: EC2 배포
          env:
            HOST: ${{secrets.EC2_HOST}}
            USER: ${{secrets.EC2_USER}}
          run:
            ssh -i ~/.ssh/aws.pem -o StrictHostKeyChecking=no $USER@$HOST '
            cd ~/app/library_by_django_example &&
            git pull origin main &&
            echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            docker compose down &&
            docker compose up -d --build
            '