# name: 간단한 CI 예제  # 워크플로우의 이름

# on: [push]          # 이벤트 설정: push가 발생하면 실행

# jobs:               # 실행할 작업들
#   hello-world:      # 작업 이름
#     runs-on: ubuntu-latest    # 실행 환경

#     steps:          # 실행할 단계들
#     - name: 인사하기
#       run: echo "안녕하세요! GitHub Actions입니다!"

# name: Python/Django CI

# on:
#   push:
#     branches: [ main ]    # main 브랜치에 push할 때 
#   pull_request:
#     branches: [ main ]    # main 브랜치로 PR 생성할 때

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     # 1. 코드 가져오기
#     - name: 코드 체크아웃
#       uses: actions/checkout@v2

#     # 2. Python 설정
#     - name: Python 설정하기
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.12'

#     # 3. 패키지 설치
#     - name: 패키지 설치하기
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt

#     # 4. 테스트 실행
#     - name: Django 테스트 실행하기
#       run: |
#         python manage.py test

# name: Python/Django CI

# on:
#   push:
#     branches: [ main ]    # main 브랜치에 push할 때
#   pull_request:
#     branches: [ main ] 
#     # main 브랜치로 PR 생성할 때

# jobs:
#   test:           # 테스트 작업
#     runs-on: ubuntu-latest
#     steps:
#       - name: 테스트 실행
#         run: echo "테스트 실행"

#   deploy:         # 배포 작업
#     needs: test   # test 작업이 성공해야 실행
#     runs-on: ubuntu-latest
#     steps:
#     - name: 코드 가져오기   # 1단계
#       uses: actions/checkout@v2

#     - name: 패키지 설치    # 2단계
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt

#     - name: Create .env file   # 3단계
#       run: |
#         echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
#         cat .env


name: Python/Django CI

on:
  push:
    branches: [ main ]    # main 브랜치에 push할 때
  pull_request:
    branches: [ main ] 
    # main 브랜치로 PR 생성할 때

jobs:
  test:           # 테스트 작업
    runs-on: ubuntu-latest
    steps:
      
name: 테스트 실행
      run: echo "테스트 실행"

  deploy:         # 배포 작업
    needs: test   # test 작업이 성공해야 실행
    runs-on: ubuntu-latest
    steps:
    
name: 코드 가져오기   # 1단계
    uses: actions/checkout@v2

    
name: 패키지 설치    # 2단계
    run: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt

    
name: Create .env file   # 3단계
    run: |
      echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
      cat .env